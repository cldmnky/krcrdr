// Code generated by mockery v2.34.1. DO NOT EDIT.

package store

import (
	api "github.com/cldmnky/krcrdr/internal/api/handlers/record/api"
	apistore "github.com/cldmnky/krcrdr/internal/api/store"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// CreateTenant provides a mock function with given fields: ctx, tenantId, tenant
func (_m *Store) CreateTenant(ctx context.Context, tenantId string, tenant *apistore.Tenant) (*apistore.Tenant, error) {
	ret := _m.Called(ctx, tenantId, tenant)

	var r0 *apistore.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *apistore.Tenant) (*apistore.Tenant, error)); ok {
		return rf(ctx, tenantId, tenant)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *apistore.Tenant) *apistore.Tenant); ok {
		r0 = rf(ctx, tenantId, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apistore.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *apistore.Tenant) error); ok {
		r1 = rf(ctx, tenantId, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_CreateTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTenant'
type Store_CreateTenant_Call struct {
	*mock.Call
}

// CreateTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantId string
//   - tenant *apistore.Tenant
func (_e *Store_Expecter) CreateTenant(ctx interface{}, tenantId interface{}, tenant interface{}) *Store_CreateTenant_Call {
	return &Store_CreateTenant_Call{Call: _e.mock.On("CreateTenant", ctx, tenantId, tenant)}
}

func (_c *Store_CreateTenant_Call) Run(run func(ctx context.Context, tenantId string, tenant *apistore.Tenant)) *Store_CreateTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*apistore.Tenant))
	})
	return _c
}

func (_c *Store_CreateTenant_Call) Return(_a0 *apistore.Tenant, _a1 error) *Store_CreateTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_CreateTenant_Call) RunAndReturn(run func(context.Context, string, *apistore.Tenant) (*apistore.Tenant, error)) *Store_CreateTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetTenant provides a mock function with given fields: ctx, tenantId
func (_m *Store) GetTenant(ctx context.Context, tenantId string) (*apistore.Tenant, error) {
	ret := _m.Called(ctx, tenantId)

	var r0 *apistore.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*apistore.Tenant, error)); ok {
		return rf(ctx, tenantId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *apistore.Tenant); ok {
		r0 = rf(ctx, tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apistore.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GetTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTenant'
type Store_GetTenant_Call struct {
	*mock.Call
}

// GetTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantId string
func (_e *Store_Expecter) GetTenant(ctx interface{}, tenantId interface{}) *Store_GetTenant_Call {
	return &Store_GetTenant_Call{Call: _e.mock.On("GetTenant", ctx, tenantId)}
}

func (_c *Store_GetTenant_Call) Run(run func(ctx context.Context, tenantId string)) *Store_GetTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_GetTenant_Call) Return(_a0 *apistore.Tenant, _a1 error) *Store_GetTenant_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GetTenant_Call) RunAndReturn(run func(context.Context, string) (*apistore.Tenant, error)) *Store_GetTenant_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStream provides a mock function with given fields: ctx, tenantId, subject, record
func (_m *Store) WriteStream(ctx context.Context, tenantId string, subject string, record *api.Record) error {
	ret := _m.Called(ctx, tenantId, subject, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *api.Record) error); ok {
		r0 = rf(ctx, tenantId, subject, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_WriteStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStream'
type Store_WriteStream_Call struct {
	*mock.Call
}

// WriteStream is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantId string
//   - subject string
//   - record *api.Record
func (_e *Store_Expecter) WriteStream(ctx interface{}, tenantId interface{}, subject interface{}, record interface{}) *Store_WriteStream_Call {
	return &Store_WriteStream_Call{Call: _e.mock.On("WriteStream", ctx, tenantId, subject, record)}
}

func (_c *Store_WriteStream_Call) Run(run func(ctx context.Context, tenantId string, subject string, record *api.Record)) *Store_WriteStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*api.Record))
	})
	return _c
}

func (_c *Store_WriteStream_Call) Return(_a0 error) *Store_WriteStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_WriteStream_Call) RunAndReturn(run func(context.Context, string, string, *api.Record) error) *Store_WriteStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
