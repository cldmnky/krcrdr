// Code generated by mockery v2.34.1. DO NOT EDIT.

package record

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ServerInterface is an autogenerated mock type for the ServerInterface type
type ServerInterface struct {
	mock.Mock
}

type ServerInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerInterface) EXPECT() *ServerInterface_Expecter {
	return &ServerInterface_Expecter{mock: &_m.Mock}
}

// AddRecord provides a mock function with given fields: c
func (_m *ServerInterface) AddRecord(c *gin.Context) {
	_m.Called(c)
}

// ServerInterface_AddRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecord'
type ServerInterface_AddRecord_Call struct {
	*mock.Call
}

// AddRecord is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ServerInterface_Expecter) AddRecord(c interface{}) *ServerInterface_AddRecord_Call {
	return &ServerInterface_AddRecord_Call{Call: _e.mock.On("AddRecord", c)}
}

func (_c *ServerInterface_AddRecord_Call) Run(run func(c *gin.Context)) *ServerInterface_AddRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ServerInterface_AddRecord_Call) Return() *ServerInterface_AddRecord_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_AddRecord_Call) RunAndReturn(run func(*gin.Context)) *ServerInterface_AddRecord_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecords provides a mock function with given fields: c
func (_m *ServerInterface) ListRecords(c *gin.Context) {
	_m.Called(c)
}

// ServerInterface_ListRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecords'
type ServerInterface_ListRecords_Call struct {
	*mock.Call
}

// ListRecords is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ServerInterface_Expecter) ListRecords(c interface{}) *ServerInterface_ListRecords_Call {
	return &ServerInterface_ListRecords_Call{Call: _e.mock.On("ListRecords", c)}
}

func (_c *ServerInterface_ListRecords_Call) Run(run func(c *gin.Context)) *ServerInterface_ListRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ServerInterface_ListRecords_Call) Return() *ServerInterface_ListRecords_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerInterface_ListRecords_Call) RunAndReturn(run func(*gin.Context)) *ServerInterface_ListRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewServerInterface creates a new instance of ServerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerInterface {
	mock := &ServerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
