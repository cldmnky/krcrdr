// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Record defines model for record.
type Record struct {
	Name string `json:"name"`
}

// RecordWithID defines model for recordWithID.
type RecordWithID struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// AddRecordJSONRequestBody defines body for AddRecord for application/json ContentType.
type AddRecordJSONRequestBody = Record

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /record)
	ListRecords(c *gin.Context)

	// (POST /record)
	AddRecord(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListRecords operation middleware
func (siw *ServerInterfaceWrapper) ListRecords(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"records:r"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListRecords(c)
}

// AddRecord operation middleware
func (siw *ServerInterfaceWrapper) AddRecord(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{"records:w"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddRecord(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/record", wrapper.ListRecords)
	router.POST(options.BaseURL+"/record", wrapper.AddRecord)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RTTY/TMBD9K9bAMWpTuOXW1QqpCAlUVtpD1YOJJ40hsc14wlJV+e9o7PRjKaLLgVOS",
	"+Xgz773JAWrfB+/QcYTqALFusdfplbD2ZOQtkA9IbDHFne5RnrwPCBVEJut2MI4FEH4fLKGBapOrtiko",
	"MI+W29W9tOmu+9hAtTnAa8IGKng1P68wn+bPp+Fj8ft0a27Ptga241aiEeuBLO8/C2wGuENNSMuBW/n6",
	"kr7eeeo1QwXvHx+gyCIIfs5CcZzXMgcYBdi6xku/wViTDWy9gwqWn1aq8aTy9tbtVOShaQTAcicI36gm",
	"I4g/kGJuWszKWQljAT6g08FCBW9TqICguU1Lz89m7JCvB3+wkZXuOrVOdRESGmlJr8xUcM4RxuBdzIK8",
	"KUt51N4xuoStQ+hsnZrnX6MMOB5GcoCxT423/ZtcHwvo9c9V7luU5UlPTaT3WdDnfLhF1Qkn35woXfqZ",
	"7ufSyc10Z7Gi5H0Bwcc/CLU0ZnLnSqKlMetjRq4JI995s/8nbV5y0tdsH1qcllLslXURiWdqjTyQi4pP",
	"2dU9XB4604DjlZmL/2/mLfeET2aBR7XVk+X2OZUX+vmU/+W/FkvFrwAAAP//QTvBO8oEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
