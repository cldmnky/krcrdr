// Code generated by mockery v2.34.1. DO NOT EDIT.

package tracer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/sdk/trace"
)

// Exporter is an autogenerated mock type for the Exporter type
type Exporter struct {
	mock.Mock
}

type Exporter_Expecter struct {
	mock *mock.Mock
}

func (_m *Exporter) EXPECT() *Exporter_Expecter {
	return &Exporter_Expecter{mock: &_m.Mock}
}

// ExportSpans provides a mock function with given fields: ctx, spans
func (_m *Exporter) ExportSpans(ctx context.Context, spans []trace.ReadOnlySpan) error {
	ret := _m.Called(ctx, spans)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []trace.ReadOnlySpan) error); ok {
		r0 = rf(ctx, spans)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exporter_ExportSpans_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportSpans'
type Exporter_ExportSpans_Call struct {
	*mock.Call
}

// ExportSpans is a helper method to define mock.On call
//   - ctx context.Context
//   - spans []trace.ReadOnlySpan
func (_e *Exporter_Expecter) ExportSpans(ctx interface{}, spans interface{}) *Exporter_ExportSpans_Call {
	return &Exporter_ExportSpans_Call{Call: _e.mock.On("ExportSpans", ctx, spans)}
}

func (_c *Exporter_ExportSpans_Call) Run(run func(ctx context.Context, spans []trace.ReadOnlySpan)) *Exporter_ExportSpans_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]trace.ReadOnlySpan))
	})
	return _c
}

func (_c *Exporter_ExportSpans_Call) Return(_a0 error) *Exporter_ExportSpans_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Exporter_ExportSpans_Call) RunAndReturn(run func(context.Context, []trace.ReadOnlySpan) error) *Exporter_ExportSpans_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *Exporter) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exporter_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type Exporter_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Exporter_Expecter) Shutdown(ctx interface{}) *Exporter_Shutdown_Call {
	return &Exporter_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *Exporter_Shutdown_Call) Run(run func(ctx context.Context)) *Exporter_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Exporter_Shutdown_Call) Return(_a0 error) *Exporter_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Exporter_Shutdown_Call) RunAndReturn(run func(context.Context) error) *Exporter_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *Exporter) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exporter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Exporter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Exporter_Expecter) Start(_a0 interface{}) *Exporter_Start_Call {
	return &Exporter_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *Exporter_Start_Call) Run(run func(_a0 context.Context)) *Exporter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Exporter_Start_Call) Return(_a0 error) *Exporter_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Exporter_Start_Call) RunAndReturn(run func(context.Context) error) *Exporter_Start_Call {
	_c.Call.Return(run)
	return _c
}

// NewExporter creates a new instance of Exporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Exporter {
	mock := &Exporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
