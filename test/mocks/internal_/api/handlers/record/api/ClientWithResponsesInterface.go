// Code generated by mockery v2.34.1. DO NOT EDIT.

package api

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	recordapi "github.com/cldmnky/krcrdr/internal/api/handlers/record/api"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

type ClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientWithResponsesInterface) EXPECT() *ClientWithResponsesInterface_Expecter {
	return &ClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// AddRecordWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AddRecordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *recordapi.AddRecordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...recordapi.RequestEditorFn) *recordapi.AddRecordResponse); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recordapi.AddRecordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...recordapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecordWithBodyWithResponse'
type ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call struct {
	*mock.Call
}

// AddRecordWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - contentType string
//   - body io.Reader
//   - reqEditors ...recordapi.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) AddRecordWithBodyWithResponse(ctx interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call {
	return &ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call{Call: _e.mock.On("AddRecordWithBodyWithResponse",
		append([]interface{}{ctx, contentType, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call) Run(run func(ctx context.Context, contentType string, body io.Reader, reqEditors ...recordapi.RequestEditorFn)) *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]recordapi.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(recordapi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call) Return(_a0 *recordapi.AddRecordResponse, _a1 error) *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, io.Reader, ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error)) *ClientWithResponsesInterface_AddRecordWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddRecordWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AddRecordWithResponse(ctx context.Context, body recordapi.Record, reqEditors ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *recordapi.AddRecordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, recordapi.Record, ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, recordapi.Record, ...recordapi.RequestEditorFn) *recordapi.AddRecordResponse); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recordapi.AddRecordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, recordapi.Record, ...recordapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_AddRecordWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecordWithResponse'
type ClientWithResponsesInterface_AddRecordWithResponse_Call struct {
	*mock.Call
}

// AddRecordWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - body recordapi.Record
//   - reqEditors ...recordapi.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) AddRecordWithResponse(ctx interface{}, body interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_AddRecordWithResponse_Call {
	return &ClientWithResponsesInterface_AddRecordWithResponse_Call{Call: _e.mock.On("AddRecordWithResponse",
		append([]interface{}{ctx, body}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_AddRecordWithResponse_Call) Run(run func(ctx context.Context, body recordapi.Record, reqEditors ...recordapi.RequestEditorFn)) *ClientWithResponsesInterface_AddRecordWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]recordapi.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(recordapi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(recordapi.Record), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_AddRecordWithResponse_Call) Return(_a0 *recordapi.AddRecordResponse, _a1 error) *ClientWithResponsesInterface_AddRecordWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_AddRecordWithResponse_Call) RunAndReturn(run func(context.Context, recordapi.Record, ...recordapi.RequestEditorFn) (*recordapi.AddRecordResponse, error)) *ClientWithResponsesInterface_AddRecordWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecordsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ListRecordsWithResponse(ctx context.Context, reqEditors ...recordapi.RequestEditorFn) (*recordapi.ListRecordsResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *recordapi.ListRecordsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...recordapi.RequestEditorFn) (*recordapi.ListRecordsResponse, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...recordapi.RequestEditorFn) *recordapi.ListRecordsResponse); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*recordapi.ListRecordsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...recordapi.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientWithResponsesInterface_ListRecordsWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecordsWithResponse'
type ClientWithResponsesInterface_ListRecordsWithResponse_Call struct {
	*mock.Call
}

// ListRecordsWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - reqEditors ...recordapi.RequestEditorFn
func (_e *ClientWithResponsesInterface_Expecter) ListRecordsWithResponse(ctx interface{}, reqEditors ...interface{}) *ClientWithResponsesInterface_ListRecordsWithResponse_Call {
	return &ClientWithResponsesInterface_ListRecordsWithResponse_Call{Call: _e.mock.On("ListRecordsWithResponse",
		append([]interface{}{ctx}, reqEditors...)...)}
}

func (_c *ClientWithResponsesInterface_ListRecordsWithResponse_Call) Run(run func(ctx context.Context, reqEditors ...recordapi.RequestEditorFn)) *ClientWithResponsesInterface_ListRecordsWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]recordapi.RequestEditorFn, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(recordapi.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *ClientWithResponsesInterface_ListRecordsWithResponse_Call) Return(_a0 *recordapi.ListRecordsResponse, _a1 error) *ClientWithResponsesInterface_ListRecordsWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClientWithResponsesInterface_ListRecordsWithResponse_Call) RunAndReturn(run func(context.Context, ...recordapi.RequestEditorFn) (*recordapi.ListRecordsResponse, error)) *ClientWithResponsesInterface_ListRecordsWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
