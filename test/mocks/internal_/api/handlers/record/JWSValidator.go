// Code generated by mockery v2.34.1. DO NOT EDIT.

package record

import (
	jwt "github.com/lestrrat-go/jwx/jwt"
	mock "github.com/stretchr/testify/mock"
)

// JWSValidator is an autogenerated mock type for the JWSValidator type
type JWSValidator struct {
	mock.Mock
}

type JWSValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *JWSValidator) EXPECT() *JWSValidator_Expecter {
	return &JWSValidator_Expecter{mock: &_m.Mock}
}

// ValidateJWS provides a mock function with given fields: jws
func (_m *JWSValidator) ValidateJWS(jws string) (jwt.Token, error) {
	ret := _m.Called(jws)

	var r0 jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.Token, error)); ok {
		return rf(jws)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.Token); ok {
		r0 = rf(jws)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jws)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWSValidator_ValidateJWS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWS'
type JWSValidator_ValidateJWS_Call struct {
	*mock.Call
}

// ValidateJWS is a helper method to define mock.On call
//   - jws string
func (_e *JWSValidator_Expecter) ValidateJWS(jws interface{}) *JWSValidator_ValidateJWS_Call {
	return &JWSValidator_ValidateJWS_Call{Call: _e.mock.On("ValidateJWS", jws)}
}

func (_c *JWSValidator_ValidateJWS_Call) Run(run func(jws string)) *JWSValidator_ValidateJWS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JWSValidator_ValidateJWS_Call) Return(_a0 jwt.Token, _a1 error) *JWSValidator_ValidateJWS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWSValidator_ValidateJWS_Call) RunAndReturn(run func(string) (jwt.Token, error)) *JWSValidator_ValidateJWS_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWSValidator creates a new instance of JWSValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWSValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWSValidator {
	mock := &JWSValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
