// Code generated by mockery v2.34.1. DO NOT EDIT.

package base

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// Root provides a mock function with given fields:
func (_m *Handler) Root() gin.HandlerFunc {
	ret := _m.Called()

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Handler_Root_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Root'
type Handler_Root_Call struct {
	*mock.Call
}

// Root is a helper method to define mock.On call
func (_e *Handler_Expecter) Root() *Handler_Root_Call {
	return &Handler_Root_Call{Call: _e.mock.On("Root")}
}

func (_c *Handler_Root_Call) Run(run func()) *Handler_Root_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Handler_Root_Call) Return(_a0 gin.HandlerFunc) *Handler_Root_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_Root_Call) RunAndReturn(run func() gin.HandlerFunc) *Handler_Root_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
