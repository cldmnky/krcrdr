// Code generated by mockery v2.34.1. DO NOT EDIT.

package store

import (
	api "github.com/cldmnky/krcrdr/internal/api/handlers/record/api"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IndexService is an autogenerated mock type for the IndexService type
type IndexService struct {
	mock.Mock
}

type IndexService_Expecter struct {
	mock *mock.Mock
}

func (_m *IndexService) EXPECT() *IndexService_Expecter {
	return &IndexService_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: ctx
func (_m *IndexService) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexService_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type IndexService_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IndexService_Expecter) Start(ctx interface{}) *IndexService_Start_Call {
	return &IndexService_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *IndexService_Start_Call) Run(run func(ctx context.Context)) *IndexService_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IndexService_Start_Call) Return(_a0 error) *IndexService_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexService_Start_Call) RunAndReturn(run func(context.Context) error) *IndexService_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, seq, record
func (_m *IndexService) Write(ctx context.Context, seq uint64, record *api.Record) error {
	ret := _m.Called(ctx, seq, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, *api.Record) error); ok {
		r0 = rf(ctx, seq, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IndexService_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type IndexService_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - seq uint64
//   - record *api.Record
func (_e *IndexService_Expecter) Write(ctx interface{}, seq interface{}, record interface{}) *IndexService_Write_Call {
	return &IndexService_Write_Call{Call: _e.mock.On("Write", ctx, seq, record)}
}

func (_c *IndexService_Write_Call) Run(run func(ctx context.Context, seq uint64, record *api.Record)) *IndexService_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(*api.Record))
	})
	return _c
}

func (_c *IndexService_Write_Call) Return(_a0 error) *IndexService_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IndexService_Write_Call) RunAndReturn(run func(context.Context, uint64, *api.Record) error) *IndexService_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexService creates a new instance of IndexService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IndexService {
	mock := &IndexService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
