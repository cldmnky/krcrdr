// Code generated by mockery v2.34.1. DO NOT EDIT.

package store

import (
	apistore "github.com/cldmnky/krcrdr/internal/api/store"
	mock "github.com/stretchr/testify/mock"
)

// KVEntry is an autogenerated mock type for the KVEntry type
type KVEntry struct {
	mock.Mock
}

type KVEntry_Expecter struct {
	mock *mock.Mock
}

func (_m *KVEntry) EXPECT() *KVEntry_Expecter {
	return &KVEntry_Expecter{mock: &_m.Mock}
}

// Key provides a mock function with given fields:
func (_m *KVEntry) Key() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KVEntry_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type KVEntry_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *KVEntry_Expecter) Key() *KVEntry_Key_Call {
	return &KVEntry_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *KVEntry_Key_Call) Run(run func()) *KVEntry_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KVEntry_Key_Call) Return(_a0 string) *KVEntry_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KVEntry_Key_Call) RunAndReturn(run func() string) *KVEntry_Key_Call {
	_c.Call.Return(run)
	return _c
}

// Operation provides a mock function with given fields:
func (_m *KVEntry) Operation() apistore.KVWatchOp {
	ret := _m.Called()

	var r0 apistore.KVWatchOp
	if rf, ok := ret.Get(0).(func() apistore.KVWatchOp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apistore.KVWatchOp)
	}

	return r0
}

// KVEntry_Operation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operation'
type KVEntry_Operation_Call struct {
	*mock.Call
}

// Operation is a helper method to define mock.On call
func (_e *KVEntry_Expecter) Operation() *KVEntry_Operation_Call {
	return &KVEntry_Operation_Call{Call: _e.mock.On("Operation")}
}

func (_c *KVEntry_Operation_Call) Run(run func()) *KVEntry_Operation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KVEntry_Operation_Call) Return(_a0 apistore.KVWatchOp) *KVEntry_Operation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KVEntry_Operation_Call) RunAndReturn(run func() apistore.KVWatchOp) *KVEntry_Operation_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *KVEntry) Value() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// KVEntry_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type KVEntry_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *KVEntry_Expecter) Value() *KVEntry_Value_Call {
	return &KVEntry_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *KVEntry_Value_Call) Run(run func()) *KVEntry_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KVEntry_Value_Call) Return(_a0 []byte) *KVEntry_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KVEntry_Value_Call) RunAndReturn(run func() []byte) *KVEntry_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewKVEntry creates a new instance of KVEntry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKVEntry(t interface {
	mock.TestingT
	Cleanup(func())
}) *KVEntry {
	mock := &KVEntry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
