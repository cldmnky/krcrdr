// Code generated by mockery v2.34.1. DO NOT EDIT.

package store

import (
	api "github.com/cldmnky/krcrdr/internal/api/handlers/record/api"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// StreamService is an autogenerated mock type for the StreamService type
type StreamService struct {
	mock.Mock
}

type StreamService_Expecter struct {
	mock *mock.Mock
}

func (_m *StreamService) EXPECT() *StreamService_Expecter {
	return &StreamService_Expecter{mock: &_m.Mock}
}

// Write provides a mock function with given fields: ctx, tenant, record
func (_m *StreamService) Write(ctx context.Context, tenant string, record *api.Record) error {
	ret := _m.Called(ctx, tenant, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *api.Record) error); ok {
		r0 = rf(ctx, tenant, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamService_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type StreamService_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - tenant string
//   - record *api.Record
func (_e *StreamService_Expecter) Write(ctx interface{}, tenant interface{}, record interface{}) *StreamService_Write_Call {
	return &StreamService_Write_Call{Call: _e.mock.On("Write", ctx, tenant, record)}
}

func (_c *StreamService_Write_Call) Run(run func(ctx context.Context, tenant string, record *api.Record)) *StreamService_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*api.Record))
	})
	return _c
}

func (_c *StreamService_Write_Call) Return(_a0 error) *StreamService_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StreamService_Write_Call) RunAndReturn(run func(context.Context, string, *api.Record) error) *StreamService_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewStreamService creates a new instance of StreamService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStreamService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StreamService {
	mock := &StreamService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
